/*
 * arrayList.remove(int index)是移除index处元素并返回移除元素
 * arrayList.add(elem)和arrayList.push(elem)好像是同样效果
 * 
 * 删除ll中所有元素的方法：
 * ArrayList list=new ArrayList();
 * list.clear();
 * list=null;
 * */

import java.awt.List;
import java.util.ArrayList;
import java.util.LinkedList;


public class oct07_102 {

	public static class TreeNode {
		int val;
		TreeNode left;
		TreeNode right;
		
		private TreeNode(int val){
			this.val = val;
		}
	}
	
	public static void main(String[] args) {
		// test goes here
		TreeNode root = new TreeNode(1);
		ArrayList<ArrayList<Integer>> res = levelOrder(root);
		System.out.println(res.get(0));
	}
	
	public static ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {  
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
	      LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
	      ArrayList<Integer> levelResult = new ArrayList<Integer>();
	      
	      if(root==null)
	      	return result;
	      queue.add(root);
	      int curLevelCount = 1;
	      int nextLevelCount = 0;
	      
	      while(!queue.isEmpty()){
	      	TreeNode cur = queue.poll();
	      	curLevelCount--; 
	      	levelResult.add(cur.val);
	      	
	      	if(cur.left != null){
	      		queue.add(cur.left);
	      		nextLevelCount++;
	      	}
	      	if(cur.right != null){
	      		queue.add(cur.right);
	      		nextLevelCount++;
	      	}
	      	
	      	if(curLevelCount == 0){
	      		result.add(levelResult); // add 进来的是指向数据位置的指针。。。？所以说下一步里面levelResult不可以clear！要新开辟一片空间。。如果clear的话result里面指向的levelResult也是空的了！！
	      		levelResult.clear();
	      		curLevelCount = nextLevelCount;
	      		nextLevelCount = 0;
	      	}
	      }
	      return result;
   } 
	
}
