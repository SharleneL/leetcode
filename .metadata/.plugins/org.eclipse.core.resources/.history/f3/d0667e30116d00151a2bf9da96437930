/*
 * 注意！！这个解里面的双层List可以通过leetcode编译！！！！！
 * 
 * arrayList.remove(int index)是移除index处元素并返回移除元素
 * arrayList.add(elem)和arrayList.push(elem)好像是同样效果
 * 
 * 删除ll中所有元素的方法：
 * ArrayList list=new ArrayList();	// 新开辟一片空间！！
 * list.clear(); 					// 把空间里的东西全删掉了！别的地方也引用不到这个list了！
 * list=null;
 * */

import java.awt.List;
import java.util.ArrayList;
import java.util.LinkedList;


public class oct07_102 {

	public static class TreeNode {
		int val;
		TreeNode left;
		TreeNode right;
		
		private TreeNode(int val){
			this.val = val;
		}
	}
	
	public static void main(String[] args) {
		// test goes here
		TreeNode root = new TreeNode(1);
		ArrayList<ArrayList<Integer>> res = levelOrder(root);
		System.out.println(res.get(0));
	}
	
	public List<List<Integer>> levelOrder(TreeNode root) {  
		List<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
		if(root == null)
			return result;
		
		List<Integer> levelResult = new ArrayList<Integer>(); 		// save the result for one level
		LinkedList<TreeNode> queue = new LinkedList<TreeNode>(); 	// save the nodes while iterate
		queue.add(root);
		
		while(!queue.isEmpty()){
			TreeNode cur = queue.poll();
		}
	}
}
